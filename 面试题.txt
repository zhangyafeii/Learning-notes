Python面试题


django面试题：
	1.你理解的http协议？
		原理：
			http是超文本传输协议，是一个数据传输格式。
			属于应用层，建立在tcp之上
			一次请求一次响应然后断开，这里体现了无状态、短连接
			请求和响应
				发送：请求头\r\n请求体
					  host:www.luffy.com\r\ncontent-type:application/json\r\n\r\n请求体
				响应：响应头\r\n响应体
		说：
			我原来学习django框架，从socket服务端开始学起。自己创造了一个socket服务器来充当：网站。浏览器当socket客户端。
			更清楚的明白到底http协议是什么？
				- 请求头 请求头
				- 响应头 响应头
			
			一次请求响应后，断开连接。
			
			后来知道wsgi(uwsgi,wsgiref,wsgizurg)就是一个写好了的socket服务端，而django,flask,tornado是专注于写web框架的
			
	2.短链接和长连接都是什么？
		长链接：建立连接->数据传输->保持连接->传输数据-> ....-> 直到一方关闭连接，多是客户端关闭连接，长连接多用于操作频繁，点对点的通讯。
		比如TCP长连接、HTTP1.1规定了默认保持长连接
		
		短链接：建立连接-> 数据传输-> 关闭连接..建立连接->数据传输-> 关闭连接。管理起来比较方便，存在的连接都是有用的连接
		不需要额外的控制手段。比如TCP短连接、HTTP/1.0中使用的是短连接，面向连接且无状态
	
	3. 常见请求头
		- Content-Type：内容类型，区分简单请求还是跨域请求
		- User-Agent：请求头，网站内部会根据不同的请求头返回不同格式的数据，比如PC段和ios、Android
		- referer，可以做图片防盗链:不同域名网站请求其他域名的图片会被禁止，比如51cto文章中请求博客园的图片，
					博客园内部会根据referer对其他域名的请求禁止，显示的时候会加载失败，甚至打上博客园的广告：欢迎使用博客园。
		- Host：域名
		- cookies：用户发送请求携带cookie一起发过去，服务端判断改用户是否登录。
	
	4. 常见的请求方法：
		- GET/POST/DELETE/PUT/PATCH/OPTIONS
	
	5. 常见的请求体？
		Form表单提交：
			POST /index http1.1\r\nhost:www.luffycity.com...\r\n\r\nusername=alex&password=123&...
		Ajax请求：
			POST /index http1.1\r\nhost:www.luffycity.com...\r\n\r\nusername=alex&password=123&...         request.POST
			POST /index http1.1\r\nhost:www.luffycity.com...\r\n\r\n{“username”:"alex","password":123}		request.body
			
		补充：django中获取请求体
			- request.POST 
			- request.body 
	
	6.django的请求生命周期
		原理：
			1. 请求进来，到达wsgi，wsgi就是一个socket服务端，它用来接收用户请求并对请求初次封装，然后将请求交给web框架
			2. 请求到达django,django对请求再次进行封装
			3. 执行中间件中的方法(process_request)，对请求中的数据进行校验或放值，比如请求对请求中的csrf进行验证，比如请求中原来没有session,经过中间件赋值和session
			4. 根据请求头的url在路由关系表中进行匹配（从上到下）
			5. 匹配成功后，执行指定的的视图函数进行业务处理和模板渲染,可能会涉及到数据库和模板操作
				URL  -> 函数  ==> FBV（function base views）视图里面使用函数处理请求
				URL  -> 类    ==> CBV（class base views）视图里面使用类处理请求
				业务处理：ORM,模板渲染：通过ORM取数据库中取数据
				模板渲染：通过template获取模板，然后将数据和模板进行模板渲染
				注：视图函数处理之后默认执行中间件中的process_view方法，对视图数据进行处理
			6. 然后在经过中间件(process_response)对响应数据再次进行加工处理
			7. 最后通过wsgi返回给浏览器
		说：
			1. wsgi, 它就是socket服务端，用于接收用户请求并将请求进行初次封装，然后将请求交给web框架（Flask、Django）
			2. 中间件，帮助我们对请求进行校验或在请求对象中添加其他相关数据，例如：csrf、request.session 
			3. 路由匹配 
			4. 视图函数，在视图函数中进行业务逻辑的处理，可能涉及到：orm、templates => 渲染
			5. 中间件，对响应的数据进行处理。
			6. wsgi,将响应的内容发送给浏览器。
	
	7.什么是wsgi?
		web服务网关接口
		除了tornado之外，其他任何web框架都是靠wsgi(基于现成的socket)实现的
		实现该协议的模块
			wsgiref
			werkzurg
			uwsgi			
	
	8.中间件是什么？
		- 中间件其实本质上是几个类，他可以帮我们在视图函数执行之前和之后定制一些操作，这些操作可以是内置的，也可以自定制。
		- 5个方法
		- 应用场景
			内置的：csrf,session，
			自定制:
			- 登录认证，不再需要在每个函数中添加装饰器
			- 权限，当用户登录时候获取当前用户所有权限并放入session，然后再次访问其他页面，获取当前url并在session中进行匹配。如果没有匹配成功，则在中间件返回“无权访问”
			- 跨域，
					- jsonp，动态创建一个script标签。
					- cors，设置响应头
					应用：本地开始前后端分离的时使用。
	
	9.中间件有多少个方法？（5个）
		process_request(self, request)
		process_view(self, request, callback, callback_args, callback_kwargs)
		process_template_response(self, request, response) # 模板渲染
		process_exception(self, request, exception)
		process_response(self, request, response)
	
		class MyWareA(MiddlewareMixin):
			def process_request(self, req):
				print("中间件1的请求")
			def process_response(self, req, response):
				print("中间件1的返回")
				return response
		 
			def process_view(self, req, callback, callback_args, callback_kwargs):
				print("中间件1的view")
		 
		 
		class MyWareB(MiddlewareMixin):
			def process_request(self, req):
				print("中间件2的请求")
			def process_response(self, req, response):
				print("中间件2的返回")
				return response
			def process_view(self, req, callback, callback_args, callback_kwargs):
				print("中间件2的view")
		 
		class MyWareC(MiddlewareMixin):
			def process_request(self, req):
				print("中间件3的请求")
			def process_response(self, req, response):
				print("中间件3的返回")
				return response
			def process_view(self, req, callback, callback_args, callback_kwargs):
				print("中间件3的view")
				
		中间件1的请求
		中间件2的请求
		中间件3的请求
		中间件1的view
		中间件2的view
		中间件3的view
		中间件3的返回
		中间件2的返回
		中间件1的返回
	
	10.视图实现有几种方式？哪个更好？
		FBV：视图函数通过函数实现业务逻辑
			url - 函数
		CBV：视图函数通过类的反射方式找到对应的方法来实现业务逻辑
			url - View
		都好，FBV和CBV本质上是一样的，都是通过函数或者方法来实现的
		只不过CBV内部通过反射的方式根据method的不同，找到不同的方法
		如果我们的对于method相关的业务逻辑写的比较多的话可以使用CBV，因为CBV天然的把不同的method分到不同的业务逻辑里面去了。
		这样来说，CBV更适合做rest framework接口，因为restful基本上都是处理不同的method的业务逻辑
	
	11.restful规范
		restful是一个规范，规定API如何编写，通过他可以让我们api更加简洁可维护。
		(1) 根据method的不同，进行不同的操作
			GET/POST/PUT/DELETE/PATCH
			原来都是在url中设置的
		(2) 面向资源编程
			http://www.luffycity.com/salary
			
		(3). 体现版本
			http://www.luffycity.com/v1/salary
			http://www.luffycity.com/v2/salary
			
			https://v4.bootcss.com/
			https://v3.bootcss.com/
		(4). 体现是API
			http://www.luffycity.com/api/v1/salary
			http://www.luffycity.com/api/v2/salary	
			
			http://api.luffycity.com/v1/salary	
			http://api.luffycity.com/v2/salary	
		(5). https
			https://www.luffycity.com/api/v1/salary
			https://www.luffycity.com/api/v2/salary	
			
		(6). 响应式设置状态码
			200
			300
			400
			500
			return HttpResponse('adfasdf',status=300)
		
		(7). 条件 
			https://www.luffycity.com/api/v2/salary?page=1&size=10
		
		(8). 返回值
			https://www.luffycity.com/api/v2/salary
			GET: 所有列表
			{
				code: 10000,
				data: [    
					{'id':1,'title':'高亮'},
					{'id':1,'title':'龙泰'},
					{'id':1,'title':'小东北'},
				]
			}
				
			POST: 返回新增的数据
				{'id':1,'title':'高亮'}
				
			https://www.luffycity.com/api/v2/salary/1/
			GET: 获取单条数据
					{'id':1,'title':'高亮'}
			PUT：更新
					{'id':1,'title':'高亮'}
			PATCH: 局部更新
					{'id':1,'title':'高亮'}
			DELETE：删除
				
		(9). 返回错误信息
			{
				code: 100001,
				error: 'xxx错误'
			}
		
		(10). Hypermedia API
			ret = {
				code: 1000,
				data:{
					id:1,
					name:'小强',
					depart_id:http://www.luffycity.com/api/v1/depart/8/
				}
			}
		说：
			restful是一个规范，规定API如何编写，通过他可以让我们api更加简洁可维护。
			如，最直观的：
				method：
					- get
					- post 
					- put 
					- delete 
				
				原来都是url中设置的。
			除此之外：
				- api
				- 版本
				- 名词
				- 条件
				- 状态码
				- 返回值
				- 错误信息
				- hypermedia link 
	
	12.django rest framework框架（10）:https://www.cnblogs.com/wupeiqi/articles/7805382.html
		作用：帮助我们快速搭建符合restful规范的接口
		执行流程：self.dispatch方法，将请求相关信息封装，并经过版本、认证、权限、频率组件之后，将request传入视图函数，并执行视图函数，返回response
				def dispatch(self, request, *args, **kwargs):
					"""
					`.dispatch()` is pretty much the same as Django's regular dispatch,
					but with extra hooks for startup, finalize, and exception handling.
					"""
					self.args = args
					self.kwargs = kwargs
					# 对request进行封装
					request = self.initialize_request(request, *args, **kwargs)
					self.request = request
					self.headers = self.default_response_headers  # deprecate?

					try:
						# 版本组件，认证组件，权限组件，频率组件
						self.initial(request, *args, **kwargs)

						# Get the appropriate handler method
						if request.method.lower() in self.http_method_names:
							handler = getattr(self, request.method.lower(),
											  self.http_method_not_allowed)
						else:
							handler = self.http_method_not_allowed

						response = handler(request, *args, **kwargs)

					except Exception as exc:
						response = self.handle_exception(exc)

					self.response = self.finalize_response(request, response, *args, **kwargs)
					return self.response
				
				def initial(self, request, *args, **kwargs):
					"""
					Runs anything that needs to occur prior to calling the method handler.
					"""
					self.format_kwarg = self.get_format_suffix(**kwargs)

					# Perform content negotiation and store the accepted info on the request
					neg = self.perform_content_negotiation(request)
					request.accepted_renderer, request.accepted_media_type = neg

					# Determine the API version, if versioning is in use.
					# 版本组件
					version, scheme = self.determine_version(request, *args, **kwargs)
					request.version, request.versioning_scheme = version, scheme

					# Ensure that the incoming request is permitted
					# 认证组件
					self.perform_authentication(request)
					# 权限组件
					self.check_permissions(request)
					# 频率组件
					self.check_throttles(request)
		组件
			权限
				- 写一个类并注册到权限类，在类的has_permission方法中编写认证逻辑
					- True
					- False
			认证
				- 写一个类并注册到认证类，在类的authenticate方法中编写认证逻辑
				- 认证成功 
					返回(user,auth)
				- 认证失败
					raise AuthenticateFaild(...)
				 	返回 None
					
				做过用户登录认证
					实现：基于token做的，用户登录的时候设置token，请求来时候获取用户对应的token进行验证，若验证失败，引发一个异常AuthenticationFailed
			访问频率限制
				原理
					写一个类并注册到频率类，在类的allow_reuqest/wait方法中编写认证逻辑
						allow_request
							- True
							- False
				使用
					匿名：
						1.1.1.1:[时间,时间,时间,时间,]
					登录：
						user:[时间,时间,时间,时间,] 
					
					默认将访问记录放在缓存中：redis/memcached
			序列化（使用最多）
				- 对queryset序列化以及对请求数据格式校验
				- 基于model自动生成字段：
					model = models.UserInfo 
					fields = ‘__all__' # ['user', 'pwd', 'ut']
				- 自定义字段：
					one2one/fk/choice: source
						title = serializers.CharField(source='course.title')
					m2m: 自定义method
						recommends = serializers.SerializerMethodField()
						def get_recommends(self, obj):
							# 获取所有推荐的课程
							queryset = obj.recommend_courses.all()
							return [{'id':row.id,'title':row.title} for row in queryset]
							
				- 体现面向对象的__new__方法：根据many的不同返回不同类型的对象
				    def __new__(cls, *args, **kwargs):
						# We override this method in order to automagically create
						# `ListSerializer` classes instead when `many=True` is set.
						if kwargs.pop('many', False):
							return cls.many_init(*args, **kwargs)
						return super(BaseSerializer, cls).__new__(cls, *args, **kwargs)
			路由 
				- 可以通过as_view传参数，根据请求方式不同执行相应的方法
				- 可以在url中设置一个结尾，类似于：.json
			视图
				- 帮助开发者提供了一些类，并在类中提供了多个方法以供我们使用
				- 面试题：你写的类都继承过哪些类？
					class View(object):

					class APIView(View):

					class GenericAPIView(views.APIView):

					class GenericViewSet(ViewSetMixin, generics.GenericAPIView)

					class ModelViewSet(mixins.CreateModelMixin,
						   mixins.RetrieveModelMixin,
						   mixins.UpdateModelMixin,
						   mixins.DestroyModelMixin,
						   mixins.ListModelMixin,
						   GenericViewSet):
			分页 
				- 对从数据库中获取的数据进行分页处理：sql -> limit offset
					- 根据页码：http://www.luffycity.com/api/v1/student/?page=1&size=10
					- 根据索引：http://www.luffycity.com/api/v1/student/?offset=60&limit=10
					- 根据加密：http://www.luffycity.com/api/v1/student/?page=edms			edms为加密之后的数据，里面可能包含当前页ID最大值和最小值等信息    
				
				- 问题：页码越大速度越慢，为什么以及如何解决？
						原因：页码越大需要扫描的行数越多，因为每次都是从0开始扫描
						解决：
							- 限制显示的页数
							- 记录当前页数据ID最大值和自小值，再次分页时，根据ID现行筛选，然后再分页
			解析器
				- 根据ContentType请求头，选择不同的解析器对对请求体中的数据进行解析
					POST /index/ http1.1.\r\nhost:11.11.11.11\r\nContent-Type:url-formencode...\r\n\r\nk1=v1&pk2=v2
					POST /index/ http1.1.\r\nhost:11.11.11.11\r\nContent-Type:application/json\r\n\r\n{'k1':'v1','k2':'v2'}
			渲染器
				- 根据URL中传入的后缀，决定数据如何渲染到页面上
				- 规定页面显示的效果（无用）
			版本 
				原理：url中设置version参数，用户请求时候传入参数，在request.version中获取版本，根据版本不同做不同处理
				使用：
					1. 添加配置
						REST_FRAMEWORK = {
							.... 
							
							'DEFAULT_VERSIONING_CLASS':'rest_framework.versioning.URLPathVersioning',
							'ALLOWED_VERSIONS':['v1','v2'], # 允许的版本
							'VERSION_PARAM':'version', # 参数
							'DEFAULT_VERSION':'v1', # 默认版本
							....
						}

					2. 设置路由 
						django_rest_framework/urls.py
							urlpatterns = [
								#url(r'^admin/', admin.site.urls),
								url(r'^api/(?P<version>\w+)/', include('api.urls')),
							]
						
						api/urls.py 
							urlpatterns = [
								url(r'^course/$', course.CourseView.as_view()),
							]
					3.访问url
						http://127.0.0.1:8000/api/v1/course/     # versioning_class = URLPathVersioning
						# http://127.0.0.1:8000/api/course/?version=v1    # versioning_class=QueryParameterVersioning
					4. 获取版本 
						request.version 获取版本
	
	13.为什么会有跨域？
		跨域：向不同域名或端口不同的地址发送请求）
		浏览器的同源策略: 不允许通过ajax,href等发送跨域请求，但对src开放
			- 开放：src
			- 禁止：ajax
		解决跨域：
			绕过浏览器同源策略就可以跨域。
			巧妙的机制：JSONP
				原理：
					同源策略会阻止ajax请求；不阻止具有src属性的标签
					JSONP:利用创建script块，在期中执行src属性为：远程url
					函数（返回值）
					动态创建script标签
					<script src='xxxx'></script>
				实现：
					jsonp，在客户端动态创建一个script标签
						1.客户端：创建一个 
							<script src='http://www.jxntv.cn/data/jmd-jxtv2.html'></script>
							<script>
								function func(arg){
									alert(arg);
								}
							</script>
						2.服务端：接收到请求并处理并返回值 "func('success')"
							相当于：
								<script>
									func('success')
								</script>
							
					PS: jsonp只能发送GET请求
				
			- cors，设置响应响应响应响应响应头
				- 简单请求
				- 复杂请求
					- options请求做预检
					- PUT/POST....
					
		在django中解决方案：
			- 中间件中设置响应头
			- django中的一个第三方组件：cors
				cors: 返回信息的时候加上一个特殊的响应头
	
	14.跨域简单和复杂请求
		1.请求方式：HEAD/GET/POST
		2.请求头信息：
			Accept
			Accept-Language
			Content-Language
			Last-Event-ID
			Content-Type 对应的值是以下三个中的任意一个
							application/x-www-form-urlencodeed
							multipart/form-data
							text/plain
		同时满足以上两个条件时，则是简单请求，否则为复杂请求
		
		如果为复杂请求：
			options请求进行预检（验证其是否能通过），通过之后才能发送POST请求
			
			class CORSMiddleware(MiddlewareMixin):
				"""
				cors跨域实现简答请求
				跨域：向不同域名或端口不同的地址发送请求）
				"""

				def process_response(self, request, response):
					# 允许你的域名来获取我的数据
					response['Access-Control-Allow-Origin'] = "*"

					if request.method == 'OPTIONS':
						# 允许你携带Content-Type请求头
						response['Access-Control-Allow-Headers'] = "Content-Type"
						# 允许你发送DELETE,PUT
						response['Access-Control-Allow-Methods'] = "DELETE,PUT"

					return response
	
	15.视图常见的继承
		from rest_framework.views import APIView # 什么都自己写
		from rest_framework.generics import GenericAPIView	# 许多默认字段
		from rest_framework.viewsets import GenericViewSet # as_view可以加参数
		from rest_framework.viewsets import ModelViewSet # 自带有增删改查，但只能对单表操作
	
	16.如何实现的访问频率控制？
			以ip或用户名（唯一标示）为key，每次访问的时间戳作为key对应的列表中的元素，比如我规定每个ip一分钟以内最多访问3次，
		则某ip发送请求过来，我首先找到对应的key值，将当前时间减去60秒，将ip对应的列表中小于减去60秒之后的时间的时间戳删除，
		若个数等于3则禁止访问，若小于3，则将当前时间戳添加至列表中头部。

		匿名用户：无法控制，因为用户可以换代理IP
			{
				192.168.1.1:[1521223123.232, 1521223122.232, 1521223121.232],
				192.168.1.2:[1521223123.232, 1521223122.232, 1521223121.232],
				192.168.1.3:[1521223123.232, 1521223122.232, 1521223121.232],
				192.168.1.4:[1521223123.232, 1521223122.232, 1521223121.232],
				192.168.1.5:[1521223123.232, 1521223122.232, 1521223121.232],
				192.168.1.6:[1521223123.232, 1521223122.232, 1521223121.232],
			}


		登录用户：如果有很多账号，也无法限制
			{
				alex:[1521223123.232, 1521223122.232, 1521223121.232],
				eric:[1521223123.232, 1521223122.232, 1521223121.232],
			}

		参考源码：from rest_framework.throttling import SimpleRateThrottle
	
	17.序列化
		序列化用于对用户请求数据进行验证和数据进行序列化。
		自定义字段：source one2on2/fk/choice
		自定义method: m2m
		注：depth 递归查询深度
	
	18.常见的状态码：
		- 200：请求成功
		- 301：重定向
		- 302：永久重定向
		- 403：服务被禁止，比如表单不加csrf发post请求
		- 404: 页面请求错误
		- 500：服务器端错误
	
	19.ORM补充：
		queryset数据类型
			values: queryset中的元素为字典
			values_list: queryset中的元素为元组
			only/defer: queryset中的元素为对象，且只取特定字段
		性能相关：链表查询
			性能低：
				models.table.objects.all()：每一次循环queryset元素跨表查询的时候会再次执行查询语句，性能较低
			性能高：一次查询所有字段，包括跨表字段
				models.table.objects.all().selected_related('pk'):queryset(obj,obj)
				models.table.objects.values(''):queryset({},{})
				models.table.objects.values_list(''):queryset((,),(,))
				models.table.objects.only/defer(''):queryset(obj,obj)
		a. values,values_list,only示例
			需求: 只取某n列
			queryset=[ {},{}]
			models.User.objects.all().values( 'id','name')
			
			queryset=[ (),()]
			models.User.objects.all().values_list( 'id','name')
			
			queryset=[ obj,obj]
			result = models.User.objects.all().only('id','name','age')	
			# result = models.User.objects.all().defer('id','name','age')	
			for item in reuslt:
				print(item.id,item.name,item.age)
		b. selected_related示例
			需求: 打印所有用户姓名以及部门名称
			数据表：
				class depart:
					title = ....
				
				class User:
					name = ...
					dp = FK(depart)
			查询：
				select * from user 
				result = models.User.objects.all()
				for item in result:
					print(item.name)

				select * from user left join depart on user.dp_id = depart.id 
				result = models.User.objects.all().selected_related('dp')
				for item in result:
				print(item.name,item.dp.title )
				示例：
		c. selected_related和prefetch_related示例
			数据表：
				class Depart(models.Model): 5个部门
					title = models.CharField(...)

				class User(models.Model):   10个用户
					name = models.CharField(...)
					email = models.CharField(...)
					dp = models.FK(Depart)
			查询：
				1.以前的你：11次单表查询

					result = User.objects.all()
					for item in result:
						print(item.name,item.dp.title)

				2. seleted_related，主动做连表查询（1次连表）

					result = User.objects.all().seleted_related('dp')
					for item in result:
						print(item.name,item.dp.title)

					问题：如果连表多，性能越来越差。

				3. prefetch_related：2次单表查询
					# select * from user ;
					# 通过python代码获取：dp_id = [1,2]
					# select * from depart where id in dp_id
					result = User.objects.all().prefetch_related('dp')
					for item in result:
						print(item.name,item.dp.title)
			注：单表查询比连接查询效率高，尤其是数据量大的时候
			赠送：
				数据量比较大，不会使用FK，允许出现数据冗余。
				
		one2one -> 水平分表 ： 将常查询的字段放在一张表，不常查询的字段放在另一张表，比如文章表和文章详细表，可以放在一张表
	
	20.原生Ajax：XMLHttpRequest对象：
			var xhr = new XMLHttpRequest()

			xhr.onreadystatechange = function(){
				if(xhr.readyState == 4){
					// 已经接收到全部响应数据，执行以下操作
					var data = xhr.responseText;
					console.log(data);
				}
			};

			xhr.open('POST', "/test/", true);

			// 设置请求头
			xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset-UTF-8');

			// 发送请求
			xhr.send('n1=1;n2=2;');
			
	21.支付宝支付 
		a. 去支付宝申请 
			- 正式：营业执照
			- 测试：沙箱测试环境
					APPID：2016092500591552
					买家：
						xnlagw8368@sandbox.com
						111111
						111111
		b. 开发程序
			SDK
				- 官方
				- github
					pay.py 
					依赖：pip3 install pycryptodome
			
			公钥私钥：
				- 应用公钥
					- 支付宝公钥
				- 应用私钥
		金额限制：小数点两位
		加密类型：RSA加密
		公钥私钥：
			- 支付宝公钥
			- 应用私钥

	22.根据字符串的形式，自动导入模块并使用反射找到模块中的类，执行指定的方法
		步骤：
			1. rsplit('.',maxsplit=1) 分割字符串为模块和类
			2. importlib导入模块
			3. 用反射获取模块中指定的类
			4. 将该类实例化成对象
			5. 执行对象指定的方法
		实现：
			import importlib

			# 字符串路径
			path = "auth.crsf.CORS"

			# 分割字符串
			module_path,class_name = path.rsplit('.',maxsplit=1)

			# 根据字符串的形式导入模块
			m = importlib.import_module(module_path)

			# 获取模块中指定的类
			cls = getattr(m,class_name)

			# 类实例化
			obj = cls()

			# 执行对象指定的方法
			obj.process_request()
		应用：django中load_middleware源码

	23.git的作用？
		用于帮助用户实现版本控制的软件
	
	24.git的命令？
		初始化
			git init			当前文件夹初始化
		代码提交
			git add file/.		自动检测工作区修改的内容提交到暂存区
			git status			查看当前文件夹工作区的状态：是否有内容修改
			git commit -m '描述'	暂存区内容提交到仓库
		代码回滚
			git checkout file				暂存区回滚到工作区
			git reset --hard '版本号'		回滚到指定版本的工作区
			git reset --soft '版本号'		将指定版本回滚到暂存区
			git reset --mix '版本号'		将指定版本回滚到修改过的内容
		查看版本日志
			git log						查看日志信息：	命令(版本号)	作者	时间	版本描述
			git log --pretty=oneline	日志信息：版本号	版本描述
			git reflog					日志信息：版本号缩写(7位)	HEAD(x)		命令	操作记录

			注：git log: 若回滚到之前的版本，后面的版本将不会显示	git reflog会显示所有版本信息
		删除文件
			rm file
			git add/rm file
			git commit -m 'delete'
		撤销删除操作
			rm file
			git checkout --file		回滚至修改前的状态

			rm file
			git add file
			git reset HEAD file
			git checkout --file		回滚至提交到暂存区前的状态
			
			rm file
			git reset --hrad '版本号'	回滚至指定版本号
		
Flask面试题


tornado面试题


网络编程面试题

				
数据库面试题


爬虫面试题


数据分析面试题


机器学习/深度学习面试题


js面试题：
	知识点：
		1.js面向对象
			function Func(name,age){
				this.Name = name;
				this.Age = age
			}
			obj = new Func('alex',18)
		 
		2.this关键字
			#每个函数都有this
			#函数调用时，this=window
			#类new时，this=obj
			 
			function func(name,age){
				#当做函数执行时，this=window
				console.log(this);
			}
			 
			func()
			 
			function Func(name,age){
				#当做函数执行时，this=window
				console.log(this);
			}
			 
			obj = new Func()
			 
		3.js中无字典，只有对象
			Name='alex';
			obj = {
				Name:'root',
				Age:18,
				Func:function(){
					#this=obj
					console.log(this.Name) #root
					var that=this
					function inner(){
						#this=window
						#that=obj
						console.log(this.Name)  #alex
						console.log(that.Name)  #root
					}
					inner()
					//自执行函数
					(function(){
						console.log(this.Name)
					}()
				},
			}
			相当于new了对象obj
			
	面试题：
		题目1. 代码在执行之前，作用域已经创建
			var v = 123;
			function foo(){
				var v = 456;
				function inner(){
					console.log(v);
				}
				return inner;
			}
			var result = foo()
			console.log(result)
			console.log(result())
			 
			问输出结果？
			 ƒ inner(){
						console.log(v);
					}
			 456
			 
		题目2.js面向对象
			Name = 'root';
			Age = 18;
			function Foo(name,age){
				this.Name = name;
				this.Age = age;
				this.Func = function(){
					//this=obj
					console.log(this.Name,this.Age);
					(function(){
						//this=window
						console.log(this.Name,this.Age);
					})();
				}
			}
			obj = new Foo('alex',666);
			obj.Func();
			 
			问输出结果？
			alex 666
			root 18
			 
		题目3：作用域
			var name = '女神'
			 
			function Foo(name,age){
				this.name = name;
				this.age = age;
				this.getName = function(){
					console.log(this.name); # 屌丝
					var that = this
					(function(){
						console.log(that.name); # 屌丝
					})()
					 
				}
			}
			 
			obj = new Foo(“屌丝”',19)
			 
			obj.getName()
		 
		题目4：实例化对象
			var name = '女神'
			obj = {
				name:'屌丝',
				age: 19,
				getName:function(){
					console.log(this.name); # 屌丝
					var that = this
					(function(){
						console.log(that.name); # 屌丝
					})()
				}
			}
			obj.getName()
			
			
			